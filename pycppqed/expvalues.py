import numpy
# pylab is imported directly in the plot methods.

class TrajectorySubsystem:
    def __init__(self, data, time, number, info):
        self.data = data
        self.time = time
        self.number = number
        self.name = info.name
        self.entrys = info.entrys

    def plot(self, show=True):
        """
        Plot this subsystem.

        **Usage**
            >>> ts.plot()

        **Arguments**
            *show*
                If set True pylab.show() will be called in the end and therefor
                a window containing the plot will appear automatically.
                (Default is True)
        """
        import pylab
        title = "SubSystem %s: %s" % (self.number, self.name)
        if hasattr(pylab, "suptitle"): # For old versions not available.
            pylab.suptitle(title) 
            pylab.gcf().canvas.set_window_title(title)
        count = len(self.entrys)
        i = 0
        for pos, key in self.entrys.items():
            i += 1
            pylab.subplot(count, 1, i)
            pylab.ylabel(key)
            pylab.plot(self.time, self.data[:,i-1])
        pylab.xlabel("time")
        if show:
            pylab.show()


class Trajectory:
    """
    A class for working with the expectation values generated by C++QED.
    
    **Usage**
        >>> tr = Trajectory(traj, info)
    
    **Arguments**
        * *traj*
            A nested tuple of the following structure: The outest tuple holds
            tuples for different time steps. The next inner tuples hold tuples
            for the different parameter sets.
        * *info*
            A Info object describing the data given as parameter "traj".
    """
    def __init__(self, traj, info=None):
        if info is None:
            self.info = self._generateinfo(traj)
        else:
            self.info = info
        parts = [0]
        i = 0
        for part in traj[0]:
            i += len(part)
            parts.append(i)
        self.data = data = numpy.empty((len(traj), parts[-1]))
        for trajpos, entry in enumerate(traj):
            for entrypos, part in enumerate(entry):
                a, b = parts[entrypos:entrypos+2]
                data[trajpos][a:b] = part
                
        self.subsystems = subsystems = []
        for i, subsystem in enumerate(self.info.expvalues.subsystems):
            items = subsystem.entrys.items()
            items.sort(lambda x,y:cmp(x[0], y[0]))
            data = self.data[:,items[0][0]-1:items[-1][0]:]
            time = self.data[:,0:1:]
            subsystems.append(TrajectorySubsystem(data, time, i, subsystem))

    def _generateinfo(self, traj):
        # TODO: Implement Trajectory._generateinfo method.
        raise NotImplementedError()

    def plot(self, subsystems=None, show=True):
        """
        Plot subsystems into separate figures.

        **Usage**
            >>> tr.plot()   # Plot all subsystems.
            >>> tr.plot([1, 2]) # Plot subsystems number 1 and 2.

        **Arguments**
            *subsystems*
                Takes a list of numbers specifieing which subsystems are being
                plotted. If given None all subsystems will be plotted.
            
            *show*
                If set True pylab.show() will be called in the end and therefor
                a window containing the plot will appear automatically.
                (Default is True)
        """
        import pylab
        if subsystems is None:
            subsystems = range(len(self.subsystems))
        for subsys in subsystems:
            pylab.figure(subsys)
            self.subsystems[subsys].plot(show=False)
        if show:
            pylab.show()

